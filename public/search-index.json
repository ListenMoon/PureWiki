[{"slug":"MD测试文档","category":"blog","title":"MD测试文档","description":"MD测试文档","body":"# 欢迎使用马克飞象\r\n\r\n@(示例笔记本)[马克飞象|帮助|Markdown]\r\n\r\n**马克飞象**是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：\r\n \r\n- **功能丰富** ：支持高亮代码块、*LaTeX* 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；\r\n- **得心应手** ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；\r\n- **深度整合** ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。\r\n\r\n-------------------\r\n\r\n[TOC]\r\n\r\n::::card\r\n横排排版演示\r\n:::card-title\r\n横排排版演示\r\n:::\r\n::::\r\n\r\n::::card{#vertical}\r\n竖排排版演示\r\n:::card-title\r\n竖排排版演示\r\n:::\r\n::::\r\n\r\n::::card{#vertical.center}\r\n竖排居中排版演示\r\n:::card-title\r\n竖排居中排版演示\r\n:::\r\n::::\r\n\r\n## Markdown简介\r\n\r\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— [维基百科](https://zh.wikipedia.org/wiki/Markdown)\r\n\r\n正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为**粗体**或者*斜体*，创建一个[链接](http://www.example.com)或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按`Ctrl + /`查看帮助。 \r\n\r\n### 代码块\r\n``` python\r\n@requires_authorization\r\ndef somefunc(param1='', param2=0):\r\n    '''A docstring'''\r\n    if param1 > param2: # interesting\r\n        print 'Greater'\r\n    return (param2 - param1 + 1) or None\r\nclass SomeClass:\r\n    pass\r\n>>> message = '''interpreter\r\n... prompt'''\r\n```\r\n### LaTeX 公式\r\n\r\n可以创建行内公式，例如 $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。或者块级公式：\r\n\r\n$$\tx = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\r\n\r\n### 表格\r\n| Item      |    Value | Qty  |\r\n| :-------- | --------:| :--: |\r\n| Computer  | 1600 USD |  5   |\r\n| Phone     |   12 USD |  12  |\r\n| Pipe      |    1 USD | 234  |\r\n\r\n### 流程图\r\n```flow\r\nflowchart TD\r\n    A[/Christmas\\]\r\n    A -->|Get money| B[\\Go shopping/]\r\n    B --> C{Let me thinksssss<br/>ssssssssssssssssssssss<br/>sssssssssssssssssssssssssss}\r\n    C -->|One| D[/Laptop/]\r\n    C -->|Two| E[\\iPhone\\]\r\n    C -->|Three| F[Car]\r\n```\r\n\r\n以及时序图:\r\n\r\n```sequence\r\nsequenceDiagram\r\n\t\t\taccTitle: test the accTitle\r\n\t\t\taccDescr: Test a description\r\n\r\n\t\t\tparticipant Alice\r\n\t\t\tparticipant Bob\r\n\t\t\tparticipant John as John<br />Second Line\r\n\t\t\tautonumber 10 10\r\n\t\t\trect rgb(200, 220, 100)\r\n\t\t\trect rgb(200, 255, 200)\r\n\r\n\t\t\tAlice ->> Bob: Hello Bob, how are you?\r\n\t\t\tBob-->>John: How about you John?\r\n\t\t\tend\r\n\r\n\t\t\tBob--x Alice: I am good thanks!\r\n\t\t\tBob-x John: I am good thanks!\r\n\t\t\tNote right of John: John thinks a long<br />long time, so long<br />that the text does<br />not fit on a row.\r\n\r\n\t\t\tBob-->Alice: Checking with John...\r\n\t\t\tNote over John:wrap: John looks like he's still thinking, so Bob prods him a bit.\r\n\t\t\tBob-x John: Hey John - we're still waiting to know<br />how you're doing\r\n\t\t\tNote over John:nowrap: John's trying hard not to break his train of thought.\r\n\t\t\tBob-x John:wrap: John! Are you still debating about how you're doing? How long does it take??\r\n\t\t\tNote over John: After a few more moments, John<br />finally snaps out of it.\r\n\t\t\tend\r\n\r\n\t\t\tautonumber off\r\n\t\t\talt either this\r\n\t\t\tAlice->>+John: Yes\r\n\t\t\tJohn-->>-Alice: OK\r\n\t\t\telse or this\r\n\t\t\tautonumber\r\n\t\t\tAlice->>John: No\r\n\t\t\telse or this will happen\r\n\t\t\tAlice->John: Maybe\r\n\t\t\tend\r\n\t\t\tautonumber 200\r\n\t\t\tpar this happens in parallel\r\n\t\t\tAlice -->> Bob: Parallel message 1\r\n\t\t\tand\r\n\t\t\tAlice -->> John: Parallel message 2\r\n\t\t\tend\r\n```\r\n\r\n> **提示：**想了解更多，请查看**流程图**[语法][3]以及**时序图**[语法][4]。\r\n\r\n### 复选框\r\n\r\n使用 `- [ ]` 和 `- [x]` 语法可以创建复选框，实现 todo-list 等功能。例如：\r\n\r\n- [x] 已完成事项\r\n- [ ] 待办事项1\r\n- [ ] 待办事项2\r\n\r\n> **注意：**目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在**马克飞象**中修改 Markdown 原文才可生效。下个版本将会全面支持。\r\n\r\n\r\n## 印象笔记相关\r\n\r\n### 笔记本和标签\r\n**马克飞象**增加了`@(笔记本)[标签A|标签B]`语法, 以选择笔记本和添加标签。 **绑定账号后**， 输入`(`自动会出现笔记本列表，请从中选择。\r\n\r\n### 笔记标题\r\n**马克飞象**会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 `欢迎使用马克飞象`。\r\n\r\n### 快捷编辑\r\n保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到**马克飞象**中打开并编辑该笔记。\r\n>**注意：**目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。\r\n\r\n### 数据同步\r\n**马克飞象**通过**将Markdown原文以隐藏内容保存在笔记中**的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。\r\n\r\n >**隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。**\r\n\r\n### 离线存储\r\n**马克飞象**使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过`文档管理`打开。\r\n\r\n> **注意：**虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，**请务必经常及时同步到印象笔记**。\r\n\r\n## 编辑器相关\r\n### 设置\r\n右侧系统菜单（快捷键`Ctrl + M`）的`设置`中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。\r\n\r\n### 快捷键\r\n\r\n帮助    `Ctrl + /`\r\n同步文档    `Ctrl + S`\r\n创建文档    `Ctrl + Alt + N`\r\n最大化编辑器    `Ctrl + Enter`\r\n预览文档 `Ctrl + Alt + Enter`\r\n文档管理    `Ctrl + O`\r\n系统菜单    `Ctrl + M` \r\n\r\n加粗    `Ctrl + B`\r\n插入图片    `Ctrl + G`\r\n插入链接    `Ctrl + L`\r\n提升标题    `Ctrl + H`\r\n\r\n## 关于收费\r\n\r\n**马克飞象**为新用户提供 10 天的试用期，试用期过后需要[续费](maxiang.info/vip.html)才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。\r\n\r\n\r\n## 反馈与建议\r\n- 微博：[@马克飞象](http://weibo.com/u/2788354117)，[@GGock](http://weibo.com/ggock \"开发者个人账号\")\r\n- 邮箱：<hustgock@gmail.com>\r\n\r\n---------\r\n感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。\r\n\r\n\r\n\r\n\r\n[^demo]: 这是一个示例脚注。请查阅 [MultiMarkdown 文档](https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes) 关于脚注的说明。 **限制：** 印象笔记的笔记内容使用 [ENML][5] 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致`脚注`和`TOC`无法正常点击。\r\n\r\n\r\n  [1]: http://maxiang.info/client_zh\r\n  [2]: https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop\r\n  [3]: http://adrai.github.io/flowchart.js/\r\n  [4]: http://bramp.github.io/js-sequence-diagrams/\r\n  [5]: https://dev.yinxiang.com/doc/articles/enml.php\r\n\r\n"},{"slug":"PureWiki主题","category":"blog","title":"PureWiki主题","description":"一个简单的主题","body":"\r\n[TOC]\r\n\r\n对于该主题，主要目的是为可展示文章的，提供一个树状菜单，可以简单当作一个界面纯净的Wiki。\r\n\r\n界面总感觉有点怪怪的。\r\n\r\n## 特性\r\n\r\n1. 文章可用元输入如下（有一些其他的，可以自己看代码，tpyings尚不完善，得看布局代码）\r\n    ```\r\n    title: Markdown测试       <!-- 必须，文章标题 -->\r\n    description: 描述         <!-- 描述，可用作seo，文章中暂未展示 -->\r\n    pubDate: 2022/5/12        <!-- 发布日期 -->\r\n    updatedDate: 2023/01/01   <!-- 修改日期-->\r\n    heroImage: \"\"             <!-- 文章头图 -->\r\n    top: true                 <!-- 展示在右上方 -->\r\n    mode: chinese             <!-- 首行缩进 -->\r\n    mode: collect             <!-- 文章不被rss收录 -->\r\n    ```\r\n\r\n2. 使用如下代码，会被标题替换，支持三级标题\r\n    ```\r\n    [TOC]\r\n    ```\r\n3. 内部已支持了`markdown`命令转化为`html`了\r\n    ```\r\n    :abbr[提示]{title=\"提示\"}\r\n    ```\r\n    效果：:abbr[提示]{title=\"提示\"}\r\n4. 支持面板\r\n    ```\r\n    ::::card\r\n    横排排版演示\r\n    :::card-title\r\n    横排排版演示\r\n    :::\r\n    ::::\r\n\r\n    ::::card{#vertical}\r\n    竖排排版演示\r\n    :::card-title\r\n    竖排排版演示\r\n    :::\r\n    ::::\r\n\r\n    ::::card{#vertical.center}\r\n    竖排居中排版演示\r\n    :::card-title\r\n    竖排居中排版演示\r\n    :::\r\n    ::::\r\n    ```\r\n    横排已经可以了，竖排感觉也没啥用。\r\n5. 可配置头图为文章中的第一张图片，只需要将配置的`showArticleHeroImage`设置为true即可。\r\n6. 文章提供了直接在github编辑功能，自行配置即可\r\n7. 增加`mermaid`渲染流程图时序图（暂时提供两个）\r\n    ```\r\n        ```flow\r\n        flowchart TD\r\n            A[/Christmas\\]\r\n            A -->|Get money| B[\\Go shopping/]\r\n            B --> C{Let me thinksssss<br/>ssssssssssssssssssssss<br/>sssssssssssssssssssssssssss}\r\n            C -->|One| D[/Laptop/]\r\n            C -->|Two| E[\\iPhone\\]\r\n            C -->|Three| F[Car]\r\n        ```\r\n    ```\r\n    ```\r\n        ```sequence\r\n        ```\r\n    ```\r\n8. 增加`mathjax`渲染公式\r\n    ```\r\n    $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$\r\n\r\n    $$\tx = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\r\n    ```\r\n9. 提供`iframe`命令和`iframec`命令  \r\n    `iframe`为收缩框默认打开  \r\n    `iframec`为收缩框默认关闭\r\n    ```\r\n    ::iframe[流程图Demo]{url=/demo/flowchart.html}\r\n    ::iframec[流程图Demo]{url=/demo/flowchart.html}\r\n    ```\r\n    目前版本能够展示url的网页,效果如下：\r\n    ::iframe[流程图Demo]{url=/demo/flowchart.html}\r\n    ::iframec[时序图]{url=/demo/sequence-diagrams.html}\r\n\r\n    ::iframe[BiliBili]{url=\"//player.bilibili.com/player.html?aid=690345969&bvid=BV1N24y117QE&cid=895902728&page=1\"}\r\n\r\n10. 提供`demo`命令\r\n\r\n    ```\r\n        :::demo\r\n        ```html\r\n        <div>\r\n            <div>before content<div>\r\n            text\r\n            <div>after content<div>\r\n        </div>\r\n        ```\r\n        :::\r\n    ```\r\n    效果：\r\n    :::demo\r\n    ```html\r\n    <div>\r\n        <div>before content<div>\r\n        text\r\n        <div>after content<div>\r\n    </div>\r\n    ```\r\n    :::\r\n    \r\n    ```\r\n    ::demo{path=\"/demo/flowchart.html\"}\r\n    ```\r\n    效果：\r\n    ::demo{path=\"/demo/flowchart.html\"}\r\n\r\n\r\n## 截图欣赏\r\n\r\n![图 1](/article/Pure%20Wiki%20%E5%BC%80%E5%8F%91%E8%AE%A1%E5%88%92_2022-11-15_15-16-09-33.png)  \r\n![图 2](/article/Pure%20Wiki%20%E5%BC%80%E5%8F%91%E8%AE%A1%E5%88%92_2022-11-15_15-16-09-58.png)  \r\n\r\n \r\n## 开发计划\r\n\r\n- [x] 图片alt显示\r\n- [x] 上一页与下一页\r\n- [x] 搜索(简陋实现，需改进)\r\n- [x] `mdx`全局组件实现，无需引入(初步实现)\r\n- [ ] 文章不显示在文件夹下，而是点击文件夹展示文章列表\r\n- [ ] 标签\r\n- [ ] 导出\r\n- [ ] 备份\r\n"},{"slug":"CSS/css中line-height属性各个单位详解","category":"blog","title":"css中line-height属性各个单位详解","description":"","body":"\r\n我们都知道css中line-height属性用于调整行高，它的值有一些不同的单位，本文将详细介绍这些单位的作用和一些区别。\r\n\r\n语法规则如下\r\n\r\nline-height: normal | `<number>` | `<length>` | `<percentage>`\r\n\r\n如果子元素没有指定行高，那么将默认继承父元素的行高，继承的时候父元素行高带单位和不带单位有一些区别。\r\n\r\n为了方便，下面效果中我设置了背景颜色，以便观察行高到底是多少\r\n\r\n## normal\r\n\r\n设置值为normal时 行高根据浏览器默认决定，不同浏览器可能有不同的值。\r\n\r\n## 使用单位px\r\n\r\n使用px单位表示行高为多少像素\r\n:::demo\r\n```html\r\n<div style=\"font-size: 20px;\r\n\t\tline-height: 20px;\">\r\n\t\t\t<p style=\"background: orange;\">我是父元素 字体大小20px 行高25px</p>\r\n\t\t\t<div style=\"font-size:30px\r\n\t\t\t\">\r\n\t\t\t\t<p style=\"background: green;\">我是子元素的内容 字体大小30px 行高继承了父元素行高25px</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n```\r\n:::\r\n\r\n## 使用百分数或em单位\r\n\r\n120%和1.2em效果完全相同。如果某个元素设置行高为1.5em，它的行高就是 1.5乘以 它的字体大小\r\n\r\n:::demo\r\n```html\r\n<p style=\"font-size: 20px; line-height: 1.5em; background: #abcdef;\">我字体大小20px,行高1.5em 算出值就是20*1.5为30px</p>\r\n```\r\n:::\r\n\r\n如果上面这个例子 行高1.5em 其实它的行高是30px\r\n\r\n如果他有子元素，子元素继承的行高是它计算后的行高30px\r\n:::demo\r\n```html\r\n<div style=\"font-size: 20px; line-height: 150%;\">\r\n<p style=\"background: orange;\">我是父元素 字体大小20px 行高150% 计算后30px</p>\r\n<div style=\"font-size: 30px;\">\r\n<p style=\"background: green;\">我是子元素 字体30px 行高继承父元素行高30px</p>\r\n</div>\r\n</div>\r\n```\r\n:::\r\n\r\n## 不带单位\r\n\r\n不带单位表示行高为元素字体大小乘以该数字。如果子元素继承父元素的该属性，则只继承了该数字，实际行高由该系数乘以各个元素自己的字体大小而定\r\n\r\n:::demo\r\n```html\r\n<div style=\"font-size: 20px; line-height: 1.5;\">\r\n<p style=\"background: orange;\">我是父元素 字体大小20px 行高1.5 计算后30px</p>\r\n<div style=\"font-size: 30px;\">\r\n<p style=\"background: green;\">我是子元素 字体30px 行高继承系数1.5 计算后是45px</p>\r\n</div>\r\n</div>\r\n```\r\n:::\r\n\r\n## 总结\r\n\r\n由于不带单位的时候只继承了系数，推荐使用这种方式。"},{"slug":"CSS/有关伪元素的思考","category":"blog","title":"有关伪元素的思考","body":"\r\n## 情景演绎\r\n\r\n当时，我看到一个链接，很快啊，就点进去了，然后无意中发现他们的标题元素是根据文本的宽度下方有一个浅色的条纹，当时觉得这不停简单的吗，就是一个h2元素里面包一个行内块元素吗，有啥稀奇的。为了验证下猜想，于是果断按了`F12`,一检查，根本没有子元素，就是一个元素加上两个伪元素实现的，当时也没猜透是怎么实现的，现在经过严谨的分析，开始本文的解说。\r\n\r\n:::demo\r\n```html\r\n<style>\r\n    h2 {\r\n        display: inline;\r\n        width: auto;\r\n        background: linear-gradient(to bottom, transparent 70%, rgba(26, 188, 156, .3) 0) no-repeat;\r\n    }\r\n    h2::before {\r\n        content: \"\";\r\n        margin-top: 1.2em;\r\n        display: block;\r\n    }\r\n    h2::after {\r\n        content: \"\";\r\n        margin-top: 1.2em;\r\n        display: block;\r\n    }\r\n</style>\r\n<div>上部元素</div>\r\n<h2>\r\n    标题\r\n</h2>\r\n<div>下部元素</div>\r\n```\r\n:::\r\n\r\n大家可以查看框架源码，可以真切的看到就是只有一个元素。\r\n\r\n## 详细重现\r\n\r\n为了能够更加深入整个话题，我重新设计了一个Demo。\r\n\r\n:::demo\r\n```html\r\n<style>\r\n        .red{\r\n            background: red;\r\n            display: inline;\r\n        }\r\n\r\n        .red::before{\r\n            content: \"\";\r\n            display: block;\r\n            margin-top: 25px;\r\n        }\r\n\r\n        .red::after{\r\n            content: \"\";\r\n            display: block;\r\n            margin-bottom: 15px;\r\n        }\r\n    </style>\r\n    <div id=\"a\">aaaaaa</div>\r\n    <div id=\"output1\"></div>\r\n    \r\n    <div class=\"top\">top</div>\r\n    <div class=\"red\">aaaaaa</div>\r\n    <div class=\"bottom\">bottom</div>\r\n    <div id=\"output2\"></div>\r\n    <script>\r\n        document.getElementById(\"output1\").innerText = `普通元素高度为：${document.querySelector('#a').offsetHeight}px`\r\n        document.getElementById(\"output2\").innerText = `中间元素的高度为：${document.querySelector('.red').offsetHeight}px`\r\n    </script>\r\n```\r\n:::\r\n\r\n可以看到，中间的元素的高度等于`21+15=36`px,相当于`aaaaaa`本身的高度加上after伪元素`margin`高度。但是为啥不加上before伪元素的`margin`高度呢？实际上，不是不加，如果将css改成这样，那么可以看到元素就是61px了。\r\n\r\n:::demo\r\n<style>\r\n.red{\r\n    background: red;\r\n    overflow: hidden;\r\n}\r\n\r\n.red::before{\r\n    content: \"\";\r\n    display: block;\r\n    margin-top: 25px;\r\n}\r\n\r\n.red::after{\r\n    content: \"\";\r\n    display: block;\r\n    margin-bottom: 15px;\r\n}\r\n</style>\r\n<div id=\"a\">aaaaaa</div>\r\n<div id=\"output1\"></div>\r\n\r\n<div class=\"top\">top</div>\r\n<div class=\"red\">aaaaaa</div>\r\n<div class=\"bottom\">bottom</div>\r\n<div id=\"output2\"></div>\r\n<script>\r\n    document.getElementById(\"output1\").innerText = `普通元素高度为：${document.querySelector('#a').offsetHeight}px`\r\n    document.getElementById(\"output2\").innerText = `中间元素的高度为：${document.querySelector('.red').offsetHeight}px`\r\n</script>\r\n:::\r\n\r\n由此，可以推断出，伪元素实际是如下结构：\r\n```\r\n<div>\r\n    ::before\r\n    text\r\n    ::after\r\n</div>\r\n\r\n=>\r\n\r\n<div>\r\n    <div>before content<div>\r\n    text\r\n    <div>after content<div>\r\n</div>\r\n```\r\n\r\n这种结构刚好与上面的情况符合：\r\n- before margin的高度没有计算上。  \r\n    这是由于margin的合并造成的，第一个元素如果存在margin-top,会把整个父元素也顶下来，解决办法是触发BFC即可。关于margin合并，可以看[这篇文章](https://www.jianshu.com/p/a7ead28910f4)。\r\n- 为啥要注释`display: inline;`  \r\n    因为不变的话就会变成如下结构。但行内元素是不能嵌套块状元素的，否则块状元素会失去其特性，这点后面分析出来在写一篇文章。\r\n    ```\r\n    <span>\r\n        <div>before content<div>\r\n        text\r\n        <div>after content<div>\r\n    </span>\r\n    ```"},{"slug":"CSS/组合选择符","category":"blog","title":"组合选择符","description":"CSS组合选择符","body":"\r\n> \t组合选择符说明了两个选择器之间的关系。\r\n\r\nCSS组合选择符包括各种简单选择符的组合方式。\r\n\r\n在 CSS3 中包含了四种组合方式:\r\n\r\n- 后代选择器(以空格` `分隔)\r\n- 子元素选择器(以大于`>`号分隔）\r\n- 相邻兄弟选择器（以加号`+`分隔）\r\n- 后续兄弟选择器（以波浪号`~`分隔）\r\n\r\n## 后代选择器\r\n\r\n后代选择器用于选取某元素的后代元素。\r\n\r\n以下实例选取所有 `<p>` 元素插入到 `<div>` 元素中: \r\n\r\n:::demo\r\n```html\r\n<style>\r\ndiv p\r\n{\r\n  background-color:yellow;\r\n}\r\n</style>\r\n<div>\r\n    <p>p Text</p>\r\n    <p>p Text</p>\r\n    <p>p Text</p>\r\n    <p>p Text</p>\r\n    <div>div Text</div>\r\n</div>\r\n```\r\n:::\r\n\r\n## 子元素选择器\r\n与后代选择器相比，子元素选择器（Child selectors）只能选择作为某元素直接/一级子元素的元素。\r\n\r\n以下实例选择了`<div>`元素中所有直接子元素 `<p>` ：\r\n:::demo\r\n```html\r\n<style>\r\ndiv>p\r\n{\r\n\tbackground-color:yellow;\r\n}\r\n</style>\r\n<h1>Welcome to My Homepage</h1>\r\n<div>\r\n<h2>My name is Donald</h2>\r\n<p>I live in Duckburg.</p>\r\n</div>\r\n\r\n<div>\r\n<span><p>I will not be styled.</p></span>\r\n</div>\r\n\r\n<p>My best friend is Mickey.</p>\r\n```\r\n:::\r\n\r\n## 相邻兄弟选择器\r\n\r\n相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。\r\n\r\n如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。\r\n\r\n以下实例选取了所有位于 `<div>` 元素后的第一个 `<p>` 元素:\r\n:::demo\r\n```html\r\n<style>\r\ndiv+p\r\n{\r\n\tbackground-color:yellow;\r\n}\r\n</style>\r\n<h1>文章标题</h1>\r\n\r\n<div>\r\n<h2>DIV 内部标题</h2>\r\n<p>DIV 内部段落。</p>\r\n</div>\r\n\r\n<p>DIV 之后的第一个 P 元素。</p>\r\n\r\n<p>DIV 之后的第二个 P 元素。</p>\r\n```\r\n:::\r\n\r\n## 后续兄弟选择器\r\n后续兄弟选择器选取所有指定元素之后的相邻兄弟元素。\r\n\r\n以下实例选取了所有 `<div>` 元素之后的所有相邻兄弟元素 `<p>` : \r\n\r\n:::demo\r\n```html\r\n<style>\r\ndiv~p\r\n{\r\n\tbackground-color:yellow;\r\n}\r\n</style>\r\n<p>之前段落，不会添加背景颜色。</p>\r\n<div>\r\n<p>段落 1。 在 div 中。</p>\r\n<p>段落 2。 在 div 中。</p>\r\n</div>\r\n\r\n<p>段落 3。不在 div 中。</p>\r\n<p>段落 4。不在 div 中。</p>\r\n```\r\n:::"},{"slug":"CSS/行内元素的细小留白","category":"blog","title":"行内元素的细小留白","description":"一般来说，行内元素会出现几个像素的底部留白，这是浏览器决定的","body":"\r\n## 现象\r\n\r\n根据如下Demo,你可以清楚的看到上面的图片跟下面的文字有着明显的间隔。\r\n\r\n:::demo\r\n```html\r\n<style>\r\n.box{\r\n    border: 1px solid #efefef;\r\n    padding: 5px;\r\n}\r\n</style>\r\n    <div class=\"box\">\r\n        <!-- <div style=\"line-height: 0;\">\r\n            <span style=\"background-color: red;\">aa</span>\r\n            <span style=\"background-color: red;\">aa</span>\r\n        </div> -->\r\n        <div style=\"background-color: green;\">\r\n            <span>文字文字</span>\r\n            <img src=\"/favicon.svg\" alt=\"\">\r\n        </div>\r\n        <div style=\"background-color: red;clear: both;\">第二行文字</div>\r\n    </div>\r\n```\r\n:::\r\n\r\n## 产生原因\r\n\r\nimg属于行内块元素，div中的img的vertical-align默认属性是baseline。\r\n\r\n![图 1](/article/%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E7%9A%84%E7%BB%86%E5%B0%8F%E7%95%99%E7%99%BD_2022-11-21_21-14-25-56.png)  \r\n\r\n文本与图片的垂直对齐基线的位置并不是相同的：\r\n\r\n在**文本中，基线是字符的下边缘**。字符的下边缘和字符元素的底边是有一定的距离的（也就是行高）。\r\n**在图片中，基线就是图片的下边缘**。\r\n\r\n所以其实可以看到图片的底边是和字符的底边对齐的，这才导致了图片底部产生间隙。\r\n\r\n## 解决办法\r\n\r\n基于以上的原理，我们可以推导出解决办法：让字符的底边和图片的底边垂直对齐，就可以解决图片底部间隙的问题了。\r\n\r\n1. 将img标签设置为块级元素  \r\n    ```\r\n    img {\r\n\t    display: block;\r\n\t}\r\n    ```\r\n2. 设置图片的垂直对齐方式   \r\n    ```\r\n    img {\r\n        vertical-align: top/text-top/middle/bottom/text-bottom\r\n    }\r\n    ```\r\n3. 改变父元素的宽和高属性   \r\n    如果父对象的宽、高固定，图片大小随父对象而定，那么可以添加以下的一个属性来去掉图片下面的空间像素：\r\n    ```\r\n    div {\r\n        width: 100px;\r\n        height: 300px;\r\n        overflow: hidden;\r\n    }\r\n    ```\r\n4. 为img设置浮动    \r\n    ```\r\n    img {\r\n        float: left;\r\n    }\r\n    ```\r\n5. 为父元素设置`font-size: 0`\r\n    ```\r\n    div {\r\n        font-size: 0;\r\n    }\r\n    ```\r\n6. 为父元素设置`line-height: 0`\r\n    ```\r\n    div {\r\n        line-height: 0;\r\n    }\r\n    ```"}]