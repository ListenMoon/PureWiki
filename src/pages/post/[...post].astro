---
import { published, publishedList, sortPublishedList } from '@blog/utils'
import type { Post } from '#/post'
import BlogPost from '@blog/layouts/BlogPost.astro'
import PagePreviewCard from '@blog/components/PagePreviewCard.astro'
import { ESITETYPE, SITE_TYPE } from '@root/src/config'
import LeftArticle from "@root/src/components/LeftArticle.astro";
    
export async function getStaticPaths() {
    let posts = []
    if (SITE_TYPE === ESITETYPE.BLOG) {
        posts = await sortPublishedList()
    }
    if (SITE_TYPE === ESITETYPE.WIKI) {
        posts = await publishedList(undefined, true)
    }
    return posts.map((post) => {
        return {
            params: { post: post.slug },
            props: { post },
        }
    })
}

// Destructure to get both `Astro.props.post` and `Astro.props.post.Content`
const {
    post: { Content, _rawString, _images, _head },
    post,
} = Astro.props as { post: Post }

const isArticleDetailPage = Astro.url.pathname.startsWith("/post/") || Astro.url.pathname.startsWith("/cate")
---
<BlogPost {...post} showTree>
    {
        SITE_TYPE === ESITETYPE.BLOG && (
        <div slot="left-bottom" style={`margin-bottom:10px;${isArticleDetailPage?'':'display:none'}`} class="tree-wrapper-up"></div>
      <div class="tree-wrapper articles" style={`flex-basis: 30%;height:0;display:flex;flex-direction: column;${isArticleDetailPage?'':'display:none'}`}>
        <div class="left-article-scroll" style="flex: 1;direction: rtl;overflow: auto;display:flex">
          <div style="direction: ltr;flex:1;width:100%;">
            <LeftArticle></LeftArticle>
          </div>
        </div>
      </div>
        )
      }
    <Content />
    {
        (post.beforeArticle || post.nextArticle) && <div slot="footer" class="paging">
            <div class="before">
                {
                    post.beforeArticle && (
                        <PagePreviewCard article={post.beforeArticle}>
                            上一篇
                        </PagePreviewCard>
                    )
                }
                <!-- {
                    post.beforeArticle && <div>上一篇：<a href={post.beforeArticle?.url}>{post.beforeArticle?.title}</a></div>
                } -->
            </div>
            <div class="next">
                {
                    post.nextArticle && (
                        <PagePreviewCard article={post.nextArticle}>
                            下一篇
                        </PagePreviewCard>
                    )
                }
                <!-- {
                    post.nextArticle && <div>下一篇：<a href={post.nextArticle?.url}>{post.nextArticle?.title}</a></div>
                } -->
            </div>
        </div>
    }
</BlogPost>
